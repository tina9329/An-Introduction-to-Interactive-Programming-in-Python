# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = True
outcome = True
score = 0
exceed=False
dealerex=False
win=False
lose=False
# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.inventory=[]

    def __str__(self):
        ans = ""
        for i in range(len(self.inventory)):
            ans += str(self.inventory[i])
        return ans       	

    def add_card(self, card):
        self.inventory.append(card)

    def get_value(self):
        ranks=[]
        num=[]
        for i in self.inventory:
            ranks.append(i.rank)
            num.append(VALUES[i.rank])
        if "A" not in ranks:
            return sum(num)
        else:
            if sum(num)+10 <=21:
                return sum(num)+10
            else:
                return sum(num)
            
        return sum(num)
    def draw(self, canvas, pos):
        for i in range(len(self.inventory)):
            self.inventory[i].draw(canvas, [pos[0]+100*i, pos[1]])
            
         
        
# define deck class 
class Deck:
    def __init__(self):
        self.inventory=[]
        for i in range(4):
            for j in range(13):
                c1 = Card(SUITS[i], RANKS[j])
                self.inventory.append(c1)
        return self.inventory

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.inventory)

    def deal_card(self):
        return self.inventory.pop(-1)
                           
    
    def __str__(self):
        ans = ""
        for i in range(len(self.inventory)):
            ans += str(self.inventory[i])
        return ans 
    
#define event handlers for buttons
def deal():
    global outcome, in_play, deck, player, dealer,exceed,dealerex,win,lose,score
    if outcome==True:
        in_play = True
        outcome=False
        exceed=False
        dealerex=False
        win=False
        lose=False
        deck = Deck()
        player = Hand()
        dealer = Hand()
        deck.shuffle()
        player.add_card(deck.deal_card())
        player.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())
    else:
        score=score-1
        lose=True
        outcome=True
        in_play=False


def hit():
    global outcome,exceed,in_play, score,lose
    if outcome==False:
        if player.get_value() <= 21:
            player.add_card(deck.deal_card())
            if player.get_value() > 21:
                exceed=True
                outcome=True
                in_play=False
                score=score-1 
    else:
        pass
        
 
   
def stand():
    global score, in_play,dealerex, outcome,win,lose
    in_play=False
    if outcome==False:
        while dealer.get_value() < 17:
            dealer.add_card(deck.deal_card())
        else:
            if dealer.get_value() > 21:
                dealerex=True
                outcome=True
            else:
                if dealer.get_value() == player.get_value() or dealer.get_value() > player.get_value():
                    score=score-1
                    outcome=True
                    lose=True
                else:
                    score=score+1
                    outcome=True
                    win=True

    else:
        pass
                
        
        
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("Blackjack",[75,105],40,"Black")
    canvas.draw_text("Score:"+str(score),[400,105],30,"Black")
    canvas.draw_text("Dealer",[75,170],30,"Black")
    canvas.draw_text("Player",[75,365],30,"Black")
    dealer.draw(canvas,[75,200])
    player.draw(canvas,[75,400])
    if outcome==False :
        canvas.draw_text("Hit or stand?",[400,365],30,"Black")
    else:
        canvas.draw_text("New deal?",[400,365],30,"Black")
    if in_play==True:
        card_loc = (CARD_CENTER[0], CARD_CENTER[1])
        canvas.draw_image(card_back, card_loc, CARD_SIZE, [75 + CARD_CENTER[0], 200 + CARD_CENTER[1]], CARD_SIZE)
    else:
        pass
    if exceed==True:
        canvas.draw_text("You have busted and lose.",[150,325],40,"Red")
    else:
        pass
    if dealerex==True:
        canvas.draw_text("The dealer have busted.",[200,170],40,"Red")
    else:
        pass
    if win==True:
        canvas.draw_text("You win.",[200,350],40,"Red")
    else:
        pass
    if lose==True:
        canvas.draw_text("You lose.",[200,350],40,"Red")
    else:
        pass
        
        
        


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
